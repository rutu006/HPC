#include <iostream>
#include <omp.h>
#include <ctime>

using namespace std;

void bubble(int array[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                swap(array[j], array[j + 1]);
            }
        }
    }
}

void pBubble(int array[], int n) {
    // Sort odd indexed numbers
    for (int i = 0; i < n; ++i) {
        #pragma omp for
        for (int j = 1; j < n; j += 2) {
            if (array[j] < array[j - 1]) {
                swap(array[j], array[j - 1]);
            }
        }

        // Synchronize
        #pragma omp barrier

        // Sort even indexed numbers
        #pragma omp for
        for (int j = 2; j < n; j += 2) {
            if (array[j] < array[j - 1]) {
                swap(array[j], array[j - 1]);
            }
        }
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
}

int main() {
    // Set up variables
    
    /*
    int n = 1000;
    int arr[1000];
    int brr[1000];

    // Create an array with numbers starting from n to 1
    for (int i = 0, j = n; i < n; i++, j--) {
        arr[i] = j;
        brr[i] = j;
    }
    */
    int n = 100;
    int arr[1000];
    int brr[1000];

    // Seed the random number generator with current time
    srand(time(0));

    // Create an array with random numbers
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % 1000; // Generate random numbers between 0 and 999
        brr[i] = arr[i]; // Copy to brr
    }


    /*
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];
    int brr[n];

    // Enter elements of the array
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        brr[i] = arr[i];
    }
    */


    // Sequential time
    double seq_start_time, seq_end_time;
    seq_start_time = omp_get_wtime();
    bubble(arr, n);
    seq_end_time = omp_get_wtime();

    // Parallel time
    double par_start_time, par_end_time;
    par_start_time = omp_get_wtime();
    pBubble(brr, n);
    par_end_time = omp_get_wtime();

    // Print sorted arrays and execution times in milliseconds
    cout << "Sequential Bubble Sort took : " << (seq_end_time - seq_start_time) * 1000000 << " milliseconds" << endl;
    cout << endl;
    cout << "Sorted array using sequential bubble sort: ";
    printArray(arr, n);
    cout << endl;


    cout << "Parallel Bubble Sort took : " << (par_end_time - par_start_time) * 1000000 << " milliseconds" << endl;
    cout << endl;
    cout << "Sorted array using parallel bubble sort: ";
    printArray(brr, n);

    return 0;
} 






// to run the code 
// g++ filename.cpp -lgomp -o filename
// ./filename