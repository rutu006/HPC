#include<iostream>
#include<omp.h>

using namespace std;

int minval_parallel(int arr[], int n){
    int minval = arr[0];
    #pragma omp parallel for reduction(min:minval)
    for(int i = 1; i < n; i++){
        if(arr[i] < minval) minval = arr[i];
    }
    return minval;
}

int maxval_parallel(int arr[], int n){
    int maxval = arr[0];
    #pragma omp parallel for reduction(max:maxval)
    for(int i = 1; i < n; i++){
        if(arr[i] > maxval) maxval = arr[i];
    }
    return maxval;
}

int sum_parallel(int arr[], int n){
    int sum = 0;
    #pragma omp parallel for reduction(+:sum)
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    return sum;
}

int average_parallel(int arr[], int n){
    return (double)sum_parallel(arr, n) / n;
}

int minval_sequential(int arr[], int n){
    int minval = arr[0];
    for(int i = 1; i < n; i++){
        if(arr[i] < minval) minval = arr[i];
    }
    return minval;
}

int maxval_sequential(int arr[], int n){
    int maxval = arr[0];
    for(int i = 1; i < n; i++){
        if(arr[i] > maxval) maxval = arr[i];
    }
    return maxval;
}

int sum_sequential(int arr[], int n){
    int sum = 0;
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    return sum;
}

int average_sequential(int arr[], int n){
    return (double)sum_sequential(arr, n) / n;
}

int main(){
    /*
    int n = 20;
    int arr[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
    */
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];

    cout << "Enter " << n << " elements:\n";
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    /*
     int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];
    // Generating random numbers for the array
    srand(time(0));
    for(int i = 0; i < n; i++) {
        arr[i] = rand() % 1000; // Generates random numbers between 0 and 999
    }
    */


    double start, end;
    double seq_start, seq_end;

    start = omp_get_wtime();
    cout << "Parallel implementation:\n";
    cout << "The minimum value is: " << minval_parallel(arr, n) << '\n';
    cout << "The maximum value is: " << maxval_parallel(arr, n) << '\n';
    cout << "The summation is: " << sum_parallel(arr, n) << '\n';
    cout << "The average is: " << average_parallel(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Execution time: " << (end - start) * 1000 << " miliseconds" << endl;

    seq_start = omp_get_wtime();
    cout << "\nSequential implementation:\n";
    cout << "The minimum value is: " << minval_sequential(arr, n) << '\n';
    cout << "The maximum value is: " << maxval_sequential(arr, n) << '\n';
    cout << "The summation is: " << sum_sequential(arr, n) << '\n';
    cout << "The average is: " << average_sequential(arr, n) << '\n';
    seq_end = omp_get_wtime();
    cout << "Execution time: " << (seq_end - seq_start) * 1000 << " miliseconds" << endl;
    
    return 0;
}

/*
g++ minmax.cpp -lgomp -o minmax
./minmax
*/
