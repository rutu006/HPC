#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
    int V;  
    vector<vector<int>> adj;  

public:
    Graph(int V) : V(V), adj(V) {}

    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    void parallelBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            cout << v << " ";

            #pragma omp parallel for
            for (int i = 0; i < adj[v].size(); ++i) {
                int n = adj[v][i];
                if (!visited[n]) {
                    visited[n] = true;
                    q.push(n);
                }
            }
        }
    }

    void sequentialBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            cout << v << " ";

            for (int i = 0; i < adj[v].size(); ++i) {
                int n = adj[v][i];
                if (!visited[n]) {
                    visited[n] = true;
                    q.push(n);
                }
            }
        }
    }
};

int main() {
    int n;
    cout << "Enter number of nodes: ";
    cin >> n;
    Graph g(n);
    int edges;
    cout << "Enter number of edges: ";
    cin >> edges;
    for (int i = 0; i < edges; i++) {
        int s, e;
        cout << "Enter start and end vertex: ";
        cin >> s >> e;
        g.addEdge(s, e);
    }

    cout << "\nBreadth-First Search (BFS): ";
    double parr_start_time = omp_get_wtime();
    g.parallelBFS(0);
    double parr_end_time = omp_get_wtime();
    cout << "\nParallel BFS Execution Time: " << (parr_end_time - parr_start_time) * 1000 << " milliseconds\n";

    double seqq_start_time = omp_get_wtime();
    g.sequentialBFS(0);
    double seqq_end_time = omp_get_wtime();
    cout << "\nSequential BFS Execution Time: " << (seqq_end_time - seqq_start_time) * 1000 << " milliseconds\n";

    return 0;
}


/*
g++ dfs.cpp -lgomp -o dfs
./dfs
*/


/*
Enter number of nodes: 7
Enter number of edges: 7
Enter start and end vertex: 0 1
Enter start and end vertex: 0 2
Enter start and end vertex: 1 3
Enter start and end vertex: 1 4
Enter start and end vertex: 2 5
Enter start and end vertex: 2 6
Enter start and end vertex: 3 4
*/